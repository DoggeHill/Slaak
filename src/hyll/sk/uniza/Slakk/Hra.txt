package hyll.sk.uniza.Slakk;


import sk.uniza.fri.worldOfFri.mapa.Budova;
import sk.uniza.fri.worldOfFri.mapa.Miestnost;
import sk.uniza.fri.worldOfFri.prikazy.Parser;
import sk.uniza.fri.worldOfFri.prikazy.Prikaz;

/**
 * Trieda sk.uniza.fri.worldOfFri.hra.Hra je hlavna trieda aplikacie "World of FRI".
 * "World of FRI" je velmi jednoducha textova hra - adventura. 
 * Hrac sa moze prechadzat po niektorych priestoroch - miestnostiach fakulty. 
 * To je v tejto verzii vsetko. Hru treba skutocne zancne rozsirit,
 * aby bola zaujimava.
 * 
 * Ak chcete hrat "World of FRI", vytvorte instanciu triedy sk.uniza.fri.worldOfFri.hra.Hra (hra)
 * a poslite jej spravu hraj.
 * 
 * sk.uniza.fri.worldOfFri.hra.Hra vytvori a inicializuje vsetky potebne objekty:
 * vytvori vsetky miestnosti, vytvori parser a zacne hru. sk.uniza.fri.worldOfFri.hra.Hra tiez vyhodnocuje
 * a vykonava prikazy, ktore vrati parser.
 * 
 * @author  Michael Kolling, David J. Barnes
 * @version 2006.03.30
 * @author  lokalizacia: Lubomir Sadlon, Jan Janech
 * @version 2012.02.21
*/
 
public class Hra  {
    private final Parser parser;
    private final Budova budova;

    /**
     * Vytvori a inicializuje hru.
     */
    public Hra() {
        this.budova = new Budova();
        this.hrac = new Hrac(this.budova.getStartovaciaMiestnost());
        this.parser = new Parser();
    }

    /**
     *  Hlavna metoda hry.
     *  Cyklicky opakuje kroky hry, kym hrac hru neukonci.
     */
    public void hraj() {            
        this.vypisPrivitanie();

        // Vstupny bod hlavneho cyklu.
        // Opakovane nacitava prikazy hraca
        // vykonava ich kym hrac nezada prikaz na ukoncenie hry.
                
        boolean jeKoniec;
        
        do {
            Prikaz prikaz = this.parser.nacitajPrikaz();
            jeKoniec = this.vykonajPrikaz(prikaz);
        } while (!jeKoniec);
        
        System.out.println("Maj sa fajn!");
    }

    /**
     * Vypise privitanie hraca do terminaloveho okna.
     */
    private void vypisPrivitanie() {
        System.out.println();
        System.out.println("Vitaj v hre World of FRI!");
        System.out.println("World of FRI je nova, neuveritelne nudna adventura.");
        System.out.println("Zadaj 'pomoc' ak potrebujes pomoc.");
        System.out.println();
        this.budova.getStartovaciaMiestnost().vypisMiestnot();
    }

    /**
     * Prevezne prikaz a vykona ho.
     * 
     * @param prikaz prikaz, ktory ma byt vykonany.
     * @return true ak prikaz ukonci hru, inak vrati false.
     */
    private boolean vykonajPrikaz(Prikaz prikaz) {
        if (prikaz.jeNeznamy()) {
            System.out.println("Nerozumiem, co mas na mysli...");
            return false;
        }

        String nazovPrikazu = prikaz.getNazov();
        
        switch (nazovPrikazu) {
            case "pomoc":
                this.vypisNapovedu();
                return false;
            case "chod":
                this.chodDoMiestnosti(prikaz);
                return false;
            case "ukonci":
                return this.ukonciHru(prikaz);
            case "zober":
                return this.zoberPredmet(prikaz);
            case "poloz":
                return this.polozPredmet(prikaz);
            case "inventar":
                this.hrac.vypisInventar();
                return false;
            case "pouzi":
                return this.pouziPredmet(prikaz);
            case "oslov":
                return this.oslov(prikaz);
            default:
                return false;
        }
    }
    // implementacie prikazov:

    /**
     * Vypise text pomocnika do terminaloveho okna.
     * Text obsahuje zoznam moznych prikazov.
     */
    private void vypisNapovedu() {
        System.out.println("Zabludil si. Si sam. Tulas sa po fakulte.");
        System.out.println();
        System.out.println("Mozes pouzit tieto prikazy:");
        System.out.println("   chod ukonci pomoc");
    }

    /**
     * Vykona pokus o prechod do miestnosti urcenej danym smerom.
     * Ak je tym smerom vychod, hrac prejde do novej miestnosti.
     * Inak sa vypise chybova sprava do terminaloveho okna.
     */
    private void chodDoMiestnosti(Prikaz prikaz) {
        if (!prikaz.maParameter()) {
            // ak prikaz nema parameter - druhe slovo - nevedno kam ist
            System.out.println("Chod kam?");
            return;
        }

        String smer = prikaz.getParameter();

        this.hrac.chod(smer);
    }

    /**
     * Ukonci hru.
     * Skotroluje cely prikaz a zisti, ci je naozaj koniec hry.
     * sk.uniza.fri.worldOfFri.prikazy.Prikaz ukoncenia nema parameter.
     * 
     * @return true, ak prikaz konci hru, inak false.
     */
    private boolean ukonciHru(Prikaz prikaz) {
        if (prikaz.maParameter()) {
            System.out.println("Ukonci, co?");
            return false;
        } else {
            return true;
        }
    }

    private boolean polozPredmet(Prikaz prikaz) {
        if (!prikaz.maParameter()) {
            System.out.println("Poloz co?");
            return false;
        }

        String nazov = prikaz.getParameter();
        this.hrac.polozPredmet(nazov);
        return false;
    }

    private boolean zoberPredmet(Prikaz prikaz) {
        if (!prikaz.maParameter()) {
            System.out.println("Zober co?");
            return false;
        }

        String nazov = prikaz.getParameter();
        this.hrac.zoberPredmet(nazov);
        return false;
    }

    private boolean pouziPredmet(Prikaz prikaz) {
        if (!prikaz.maParameter()) {
            System.out.println("Pouzi co?");
            return false;
        }

        String nazov = prikaz.getParameter();
        this.hrac.pouzi(nazov);
        return false;
    }


    private boolean oslov(Prikaz prikaz) {
        if (!prikaz.maParameter()) {
            System.out.println("Oslov koho?");
            return false;
        }

        String meno = prikaz.getParameter();
        this.hrac.oslovNPC(meno);

        return false;
    }


}
